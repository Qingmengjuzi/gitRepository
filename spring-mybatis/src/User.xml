<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：命名空间，用于隔离sql，还有一个很重要的作用，后面会讲 -->
<!-- 写Sql语句   -->
<mapper namespace="test">
<!-- id:statement的id 或者叫做sql的id -->
<!-- paramentType：声明输入参数的类型 -->
<!-- resultType:声明输出的结果类型，应该填写pojo的全路径 -->
<!-- #{}：输入参数的占位符，相当于jdbc的？ -->
<select id="queryUserById" parameterType="int"
resultType="com.why.mybatis.entity.User">
SELECT * FROM user where id = #{id}
</select> 
<!-- 如果返回多个结果，mybatis会自动把返回的结果放在list容器中 -->
<select id="queryUserByUsername1" parameterType="string"
resultType="com.why.mybatis.entity.User">
SELECT * FROM user where username LIKE '%${value}%'
</select>
<insert id="saveUser" parameterType="com.why.mybatis.entity.User">
<selectKey keyColumn="id" keyProperty="id" order="BEFORE"
resultType="int">
SELECT LAST_INSERT_ID()
</selectKey>
INSERT INTO user (username,birthday,sex,address) VALUES
(#{username},#{birthday},#{sex},#{address})
</insert>
<!-- 更新用户 -->
<update id="updateUserById"
parameterType="com.why.mybatis.entity.User">
UPDATE user SET 
username = #{username} , sex = #{sex} where id=#{id}
</update>
<!-- 删除用户 -->
<delete id="deleteUserById" parameterType="int">
delete from user where id=#{id}
</delete>
</mapper>

